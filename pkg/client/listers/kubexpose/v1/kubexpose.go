/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "kubexpose/pkg/apis/kubexpose/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubexposeLister helps list Kubexposes.
type KubexposeLister interface {
	// List lists all Kubexposes in the indexer.
	List(selector labels.Selector) (ret []*v1.Kubexpose, err error)
	// Kubexposes returns an object that can list and get Kubexposes.
	Kubexposes(namespace string) KubexposeNamespaceLister
	KubexposeListerExpansion
}

// kubexposeLister implements the KubexposeLister interface.
type kubexposeLister struct {
	indexer cache.Indexer
}

// NewKubexposeLister returns a new KubexposeLister.
func NewKubexposeLister(indexer cache.Indexer) KubexposeLister {
	return &kubexposeLister{indexer: indexer}
}

// List lists all Kubexposes in the indexer.
func (s *kubexposeLister) List(selector labels.Selector) (ret []*v1.Kubexpose, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Kubexpose))
	})
	return ret, err
}

// Kubexposes returns an object that can list and get Kubexposes.
func (s *kubexposeLister) Kubexposes(namespace string) KubexposeNamespaceLister {
	return kubexposeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubexposeNamespaceLister helps list and get Kubexposes.
type KubexposeNamespaceLister interface {
	// List lists all Kubexposes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Kubexpose, err error)
	// Get retrieves the Kubexpose from the indexer for a given namespace and name.
	Get(name string) (*v1.Kubexpose, error)
	KubexposeNamespaceListerExpansion
}

// kubexposeNamespaceLister implements the KubexposeNamespaceLister
// interface.
type kubexposeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kubexposes in the indexer for a given namespace.
func (s kubexposeNamespaceLister) List(selector labels.Selector) (ret []*v1.Kubexpose, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Kubexpose))
	})
	return ret, err
}

// Get retrieves the Kubexpose from the indexer for a given namespace and name.
func (s kubexposeNamespaceLister) Get(name string) (*v1.Kubexpose, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubexpose"), name)
	}
	return obj.(*v1.Kubexpose), nil
}
